不同GC和堆内容总结

对于四个不同的垃圾收集器，我们可以看到，当我们增大堆内存的时候(512m -> 1g -> 2g)，垃圾清理的次数明显减少了。堆内存很小时，需要频繁的进行垃圾收集来保证我们有足够的空间来存放新产生的对象，然后当堆内存增大后，可以容纳更多的对象，所以垃圾收集的次数就减少了。另外，虽然说垃圾收集的次数减少了，但是因为堆内存增大后，可以存放更多的对象，所以进行垃圾清理时需要清理的对象就有可能更多，所以每次GC暂停的时间就更多。并且当堆内存比较大的时候，年轻代内存一般也会比较大，FullGC的次数也会减少，甚至不需要FullGC。


java -XX:+PrintGCDetails -XX:+UseXXXGC -Xms1g -Xmx1g GCLogAnalysis
串行收集器：适合单处理机器。
并行收集器：对于垃圾收集来说，并行收集器比串行收集器快很多，本次实验中，串行收集器一般MinorGC需要50ms左右，并行收集器只需要不超过10ms。并行收集器可以保证大部分工作都并发进行，也就是应用不停止，垃圾回收只暂停很少的时间，此收集器适合对响应时间要求比较高的中大规模应用。另外系统考虑吞吐量优先的话，也可以使用并行GC。
CMS收集器：Java中测试时+ConcMarkSweep后，年轻代使用的是ParNew收集器，老年代是CMS收集器。年轻代垃圾处理的时间大约为50ms，暂停时间比较长。老年代是CMS收集器，CMS全部垃圾收集阶段暂停时间加起来也比较短。当希望系统停顿时间尽可能短的时候，或者重视响应时间的时候，可以考虑使用该收集器。
G1收集器：G1收集器可以说是CMS收集器的升级版，是一款面向服务器的垃圾收集器，以极高概率满足 GC 停顿时间要求的同时，还具备高吞吐量性能特征。本次测试中，G1收集器在年轻代的GC和FullGC都有很短的暂停时间。通过GCeasy分析，平均GC时间是5ms左右，最大GC时间也只有20ms左右。综上来看，G1收集器是这四个收集器中效果最好的收集器。
